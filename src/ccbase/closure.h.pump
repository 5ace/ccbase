/* Copyright (c) 2012-2017, Bin Wei <bin@vip.qq.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * The names of its contributors may not be used to endorse or 
 * promote products derived from this software without specific prior 
 * written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef CCBASE_CLOSURE_H_
#define CCBASE_CLOSURE_H_

#include <assert.h>
#include <atomic>
#include <utility>
#include "ccbase/common.h"

namespace ccb {

namespace internal {

class ClosureFuncBase;

class ClosureBase {
 public:
  virtual ~ClosureBase() {}
  virtual bool IsPermanent() const = 0;
  ClosureBase() : ref_count_(1) {}
  ClosureBase(const ClosureBase& c) : ref_count_(1) {}
 private:
  void AddRef() {
    assert(ref_count_ > 0);
    ref_count_.fetch_add(1);
  }
  void DelRef() {
    assert(IsPermanent());
    if (ref_count_.fetch_sub(1) == 1) {
      delete this;
    }
  }
  std::atomic<int64_t> ref_count_;
  friend ClosureFuncBase;
};

template <typename Signature>
class Closure : public ClosureBase {
 public:
};

$var max_args = 6
$range i 0..max_args

$for i [[

$range j 1..i

template <
  typename R$for j [[, typename A$j]]
>
class Closure<R($for j, [[A$j]])> : public ClosureBase {
 public:
  virtual R Run($for j, [[A$j a$j]]) = 0;
  virtual Closure<R($for j, [[A$j]])>* Clone() = 0;
};

]]

template <bool Enabled, typename T>
class ConditionalAutoDeleter {
 public:
  explicit ConditionalAutoDeleter(T* p)
      : p_(p) {
  }
  ~ConditionalAutoDeleter() {
    if (Enabled)
      delete p_;
  }
 private:
  ConditionalAutoDeleter(const ConditionalAutoDeleter&);
  ConditionalAutoDeleter& operator=(const ConditionalAutoDeleter&);
 private:
  T* p_;
};

$range nleft_args 0..max_args
$range nbind_args 0..max_args

$for nleft_args [[
$for nbind_args [[

$var nargs = nleft_args + nbind_args
$range j 1..nbind_args
$range k 1..nargs
$range i nbind_args+1..nargs

// Closures with $nleft_args args and $nbind_args pre-binded args

template <
  bool Permanent,
  typename R,
  typename Class,
  typename MethodClass$for k [[, typename Arg$k]] $for j [[, typename PreArg$j]]
>
class MethodClosure_Arg$(nleft_args)_Bind$nbind_args : public Closure<R($for i, [[Arg$i]])> {
 public:
  typedef R(MethodClass::*MethodType)($for k, [[Arg$k]]);
  MethodClosure_Arg$(nleft_args)_Bind$nbind_args(Class *object, MethodType method$for j [[, PreArg$j pa$j]]):
    object_(object), method_(method)$for j [[, pa_$(j)_(pa$j)]] {}
  virtual R Run($for i, [[Arg$i arg$i]]) {
    ConditionalAutoDeleter<!Permanent, MethodClosure_Arg$(nleft_args)_Bind$nbind_args> self_deleter(this);
    return (object_->*method_)($for j, [[pa_$(j)_]]$if nleft_args > 0[[$if nbind_args > 0[[, ]]]]$for i, [[arg$i]]);
  }
  virtual Closure<R($for i, [[Arg$i]])>* Clone() {
    return new MethodClosure_Arg$(nleft_args)_Bind$nbind_args(*this);
  }
  virtual bool IsPermanent() const { return Permanent; }
 private:
  Class* object_;
  MethodType method_;

$for j [[
  PreArg$j pa_$(j)_;

]]
};

template <typename R, typename Class, typename MethodClass$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
Closure<R($for i, [[Arg$i]])>*
NewClosure(Class *object, R(MethodClass::*method)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return new MethodClosure_Arg$(nleft_args)_Bind$nbind_args<false, R, Class, MethodClass$for k [[, Arg$k]]$for j[[, PreArg$j]]>(
    object, method$for j [[, pa$j]]);
}

template <typename R, typename Class, typename MethodClass$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
Closure<R($for i, [[Arg$i]])>*
NewPermanentClosure(Class *object, R(MethodClass::*method)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return new MethodClosure_Arg$(nleft_args)_Bind$nbind_args<true, R, Class, MethodClass$for k [[, Arg$k]]$for j[[, PreArg$j]]>(
    object, method$for j [[, pa$j]]);
}

template <
  bool Permanent,
  typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]
>
class FunctionClosure_Arg$(nleft_args)_Bind$nbind_args : public Closure<R($for i, [[Arg$i]])> {
 public:
  typedef R(*FunctionType)($for k, [[Arg$k]]);
  FunctionClosure_Arg$(nleft_args)_Bind$nbind_args(FunctionType function$for j [[, PreArg$j pa$j]]):
    function_(function)$for j [[, pa_$(j)_(pa$j)]] {}
  virtual R Run($for i, [[Arg$i arg$i]]) {
    ConditionalAutoDeleter<!Permanent, FunctionClosure_Arg$(nleft_args)_Bind$nbind_args> self_deleter(this);
    return function_($for j, [[pa_$(j)_]]$if nleft_args > 0[[$if nbind_args > 0[[, ]]]]$for i, [[arg$i]]);
  }
  virtual Closure<R($for i, [[Arg$i]])>* Clone() {
    return new FunctionClosure_Arg$(nleft_args)_Bind$nbind_args(*this);
  }
  virtual bool IsPermanent() const { return Permanent; }
 private:
  FunctionType function_;

$for j [[
  PreArg$j pa_$(j)_;

]]
};

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
Closure<R($for i, [[Arg$i]])>*
NewClosure(R(*function)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return new FunctionClosure_Arg$(nleft_args)_Bind$nbind_args<false, R$for k [[, Arg$k]]$for j [[, PreArg$j]]>(function$for j [[, pa$j]]);
}

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
Closure<R($for i, [[Arg$i]])>*
NewPermanentClosure(R(*function)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return new FunctionClosure_Arg$(nleft_args)_Bind$nbind_args<true, R$for k [[, Arg$k]]$for j [[, PreArg$j]]>(function$for j [[, pa$j]]);
}

template <
  bool Permanent, typename F,
  typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]
>
class FunctorClosure_Arg$(nleft_args)_Bind$nbind_args : public Closure<R($for i, [[Arg$i]])> {
 public:
  explicit FunctorClosure_Arg$(nleft_args)_Bind$nbind_args(const F& functor$for j [[, PreArg$j pa$j]])
    : functor_(functor)$for j [[, pa_$(j)_(pa$j)]] {}
  explicit FunctorClosure_Arg$(nleft_args)_Bind$nbind_args(F&& functor$for j [[, PreArg$j pa$j]])
    : functor_(std::move(functor))$for j [[, pa_$(j)_(pa$j)]] {}
  virtual R Run($for i, [[Arg$i arg$i]]) {
    ConditionalAutoDeleter<!Permanent, FunctorClosure_Arg$(nleft_args)_Bind$nbind_args> self_deleter(this);
    return functor_($for j, [[pa_$(j)_]]$if nleft_args > 0[[$if nbind_args > 0[[, ]]]]$for i, [[arg$i]]);
  }
  virtual Closure<R($for i, [[Arg$i]])>* Clone() {
    return new FunctorClosure_Arg$(nleft_args)_Bind$nbind_args(*this);
  }
  bool IsPermanent() const { return Permanent; }
 private:
  F functor_;

$for j [[
  PreArg$j pa_$(j)_;

]]
};

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]], typename F>
Closure<R($for i, [[Arg$i]])>*
NewClosure(F&& functor$for j [[, PreArg$j pa$j]]) {
  return new FunctorClosure_Arg$(nleft_args)_Bind$nbind_args<false, typename std::decay<F>::type, R$for k [[, Arg$k]]$for j [[, PreArg$j]]>(
    std::forward<F>(functor)$for j [[, pa$j]]);
}

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]], typename F>
Closure<R($for i, [[Arg$i]])>*
NewPermanentClosure(F&& functor$for j [[, PreArg$j pa$j]]) {
  return new FunctorClosure_Arg$(nleft_args)_Bind$nbind_args<true, typename std::decay<F>::type, R$for k [[, Arg$k]]$for j [[, PreArg$j]]>(
    std::forward<F>(functor)$for j [[, pa$j]]);
}

]]
]]

// Helpers for 0-Args-Functor

template <typename F>
auto NewClosure(F&& functor) -> Closure<decltype(functor())()>* {
  return new FunctorClosure_Arg0_Bind0<false, typename std::decay<F>::type, decltype(functor())>(std::forward<F>(functor));
}

template <typename F>
auto NewPermanentClosure(F&& functor) -> Closure<decltype(functor())()>* {
  return new FunctorClosure_Arg0_Bind0<true, typename std::decay<F>::type, decltype(functor())>(std::forward<F>(functor));
}

// Base of ccb::ClosureFunc

class ClosureFuncBase {
 protected:
  ClosureFuncBase() : p_(nullptr) {}
  ClosureFuncBase(std::nullptr_t) : p_(nullptr) {}  // NOLINT
  explicit ClosureFuncBase(ClosureBase* p) noexcept
      : p_(p) {
    assert(!p || p->IsPermanent());
  }
  ClosureFuncBase(const ClosureFuncBase& c) noexcept
      : ClosureFuncBase(c.share()) {}
  ClosureFuncBase(ClosureFuncBase&& c) noexcept
      : p_(c.release()) {}
  ~ClosureFuncBase() {
    if (p_) p_->DelRef();
  }
  ClosureFuncBase& operator=(const ClosureFuncBase& c) {
    ClosureFuncBase{c}.swap(*this);
    return *this;
  }
  ClosureFuncBase& operator=(ClosureFuncBase&& c) {
    ClosureFuncBase{std::move(c)}.swap(*this);
    return *this;
  }
  ClosureBase* get() const {
    return p_;
  }
  void reset(ClosureBase* p) {
    ClosureFuncBase{p}.swap(*this);
  }
  void swap(ClosureFuncBase& c) {
    std::swap(p_, c.p_);
  }

 private:
  ClosureBase* share() const {
    if (p_) p_->AddRef();
    return p_;
  }
  ClosureBase* release() {
    ClosureBase* p = get();
    p_ = nullptr;
    return p;
  }
  ClosureBase* p_;
};

}  // namespace internal

// Public class ClosureFunc

template <typename Signature>
class ClosureFunc {
 public:
};

$range i 0..max_args

$for i [[

$range j 1..i

template <
  typename R$for j [[, typename A$j]]
>
class ClosureFunc<R($for j, [[A$j]])> : public internal::ClosureFuncBase {
 public:
  typedef internal::ClosureFuncBase BaseType;
  typedef internal::Closure<R($for j, [[A$j]])> ClosureType;
  ~ClosureFunc() = default;
  // constructor
  ClosureFunc() = default;
  ClosureFunc(std::nullptr_t)  // NOLINT
      : ClosureFunc() {}
  explicit ClosureFunc(ClosureType* p) noexcept
      : ClosureFuncBase(p) {}
  template <class F, typename = typename std::enable_if<!std::is_same<typename std::decay<F>::type, ClosureFunc>::value>::type>
  ClosureFunc(F&& f) noexcept
      : ClosureFuncBase(internal::NewPermanentClosure<R$for j [[, A$j]]>(std::forward<F>(f))) {}
  // copyable and movable
  ClosureFunc(const ClosureFunc& c) = default;
  ClosureFunc& operator=(const ClosureFunc&) = default;
  ClosureFunc(ClosureFunc&& c) = default;
  ClosureFunc& operator=(ClosureFunc&&) = default;
  // resetable and swappable
  void reset() {
    BaseType::reset(nullptr);
  }
  void swap(ClosureFunc& c) {
    BaseType::swap(c);
  }
  // checkable
  operator bool() const {
    return static_cast<bool>(get());
  }
  // callable
  R operator()($for j, [[A$j a$j]]) const {
    return static_cast<ClosureType*>(get())->Run($for j, [[a$j]]);
  }
};

]]

$for nleft_args [[
$for nbind_args [[

$var nargs = nleft_args + nbind_args
$range j 1..nbind_args
$range k 1..nargs
$range i nbind_args+1..nargs

// Bind ClosureFunc<R($for i, [[Arg$i]])> with $nbind_args pre-binded args

template <typename R, typename Class, typename MethodClass$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
ClosureFunc<R($for i, [[Arg$i]])>
BindClosure(Class *object, R(MethodClass::*method)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return ClosureFunc<R($for i, [[Arg$i]])>(internal::NewPermanentClosure(object, method$for j [[, pa$j]]));
}

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]]>
ClosureFunc<R($for i, [[Arg$i]])>
BindClosure(R(*function)($for k, [[Arg$k]])$for j [[, PreArg$j pa$j]]) {
  return ClosureFunc<R($for i, [[Arg$i]])>(internal::NewPermanentClosure(function$for j [[, pa$j]]));
}

template <typename R$for k [[, typename Arg$k]]$for j [[, typename PreArg$j]], typename F>
ClosureFunc<R($for i, [[Arg$i]])>
BindClosure(F&& functor$for j [[, PreArg$j pa$j]]) {
  return ClosureFunc<R($for i, [[Arg$i]])>(internal::NewPermanentClosure<R$for k [[, Arg$k]]$for j [[, PreArg$j]]>(std::forward<F>(functor)$for j [[, pa$j]]));
}

]]
]]

template <typename F>
auto BindClosure(F&& functor) -> ClosureFunc<decltype(functor())()> {
  return ClosureFunc<decltype(functor())()>(internal::NewPermanentClosure(std::forward<F>(functor)));
}

}  // namespace ccb

#endif  // CCBASE_CLOSURE_H_
